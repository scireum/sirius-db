#
# Made with all the love in the world
# by scireum in Remshalden, Germany
#
# Copyright by scireum GmbH
# http://www.scireum.de - info@scireum.de
#

# Adding the db module to the list of known modules...
product {
    modules {
        sirius-db {
            version = "${project.version}"
            build = "${build.number}"
            date = "${timestamp}"
            vcs = "${build.vcs.number}"
        }
    }
}

cache {

    # Controls the size of the lookup cache used by the FieldLookupCache.
    mixing-field-lookup {
        maxSize = 16384
        ttl = 1 minute
    }

}

# Configures the system health monitoring
health {

    # Defines limits for the database / JDBC layer
    limits {

        # JDBC connection usage
        db-uses.gray = 25
        db-uses.warning = 0
        db-uses.error = 0

        # JDBC connection pool utilization
        db-pool-utilization.gray = 5
        db-pool-utilization.warning = 80
        db-pool-utilization.error = 98

        # JDBC connections establisehd during a check interval.
        # An increased value here indicates that at least one pool is badly configured
        # and that it might drain the TCP port pool of the operating system, which
        # will effectively block or destroy the TCP/IP stack of the OS
        db-connects.gray = 5
        db-connects.warning = 15
        db-connects.error = 30

        # JDBC queries
        db-queries.gray = 25
        db-queries.warning = 0
        db-queries.error = 0

        # JDBC query duration in ms
        db-query-duration.gray = 10
        db-query-duration.warning = 500
        db-query-duration.error = 10000

        # Threshold for slow JDBC queries in ms
        db-slow-queries.gray = 0
        db-slow-queries.warning = 2
        db-slow-queries.error = 0

        # Number of redis calls per minute
        redis-calls.gray = 1000
        redis-calls.warning = 64000
        redis-calls.error = 0

        # Duration of a redis call in ms
        redis-call-duration.gray = 25
        redis-call-duration.warning = 500
        redis-call-duration.error = 10000

        # Redis memory usage in megabyte
        redis-memory-usage.gray = 16
        redis-memory-usage.warning = 128
        redis-memory-usage.red = 0

        # Number of redis pub-sub messages per minute
        redis-messages.gray = 100
        redis-messages.warning = 4096
        redis-messages.error = 0

        # Number of miliseconds required to process a pub-sub message
        redis-message-duration.gray = 25
        redis-message-duration.warning = 500
        redis-message-duration.error = 10000

        # Number of calls against Elasticsearch
        es-calls.gray = 100
        es-calls.warning = 0
        es-calls.error = 0

        # Duration of Elasticsearch calls in ms
        es-call-duration.gray = 25
        es-call-duration.warning = 500
        es-call-duration.error = 10000

        # Threshold for slow queries against Elasticsearch in ms
        es-slow-queries.gray = 0
        es-slow-queries.warning = 2
        es-slow-queries.error = 0

        # Warns if there are unassigned shards
        es-unassigned-shards.gray = 0
        es-unassigned-shards.warning = 0
        es-unassigned-shards.error = 1

        # Number of calls against MongoDB
        mongo-calls.gray = 100
        mongo-calls.warning = 0
        mongo-calls.error = 0

        # Duration of MongoDB calls in ms
        mongo-call-duration.gray = 25
        mongo-call-duration.warning = 500
        mongo-call-duration.error = 10000

        # Threshold for slow queries against MongoDB in ms
        mongo-slow-queries.gray = 0
        mongo-slow-queries.warning = 2
        mongo-slow-queries.error = 0
    }
}

# Defines database connectivity settings
jdbc {

    # Every query which takes longer will be logged to "db-slow" on level INFO
    logQueryThreshold = 10 seconds

    # Every connection which lasts longer will be logged to "db-slow" on level INFO
    logConnectionThreshold = 30 seconds

    # The default timeout at which a running query will get interrupted and restarted at the current position
    queryIterateTimeout = 15 minutes

    # A profile provides a template for database connections.
    # Each value of the profile serves as backup or default value for the one in the database secion.
    # Also a profile value can reference properties defined in one of both sections like this: ${name}.
    # The url property of the mysql profile (below) is an example.
    profile {
        # The default profile only declares connection management properties. These can be overridden in the
        # actual database section.
        default {
            # Number of connections initially opened
            initialSize = 0

            # Maximal number of open connections
            maxActive = 32

            # Maximal number of open unused connections
            maxIdle = 16

            # Validation query used to determine the fitness of a connection
            validationQuery = ""

            # Specifies the service name used for port mapping in docker environments
            service = ""

        }

        # The mysql profile declares common settings to connect to a MySQL database.
        # As the url is auto generated, only the host and the database name need to be defined. By default 'host'
        # will be 'localhost'.
        mysql {
            driver = "com.mysql.jdbc.Driver"
            url = "jdbc:mysql://${host}:${port}/${database}?autoReconnect=true&characterEncoding=utf-8"
            hostUrl = "jdbc:mysql://${host}:${port}/?autoReconnect=true&characterEncoding=utf-8"
            host = "localhost"
            port = "3306"
            validationQuery = "SELECT 1"
            service = "mysql"
        }

        # The maria profile declares common settings to connect to a MariaDB database.
        # As maria DB is a fork of MySQL, things aren't too different for these two profiles.
        mariadb {
            driver = "org.mariadb.jdbc.Driver"
            url = "jdbc:mariadb://${host}:${port}/${database}?autoReconnect=true&characterEncoding=utf-8"
            hostUrl = "jdbc:mariadb://${host}:${port}/?autoReconnect=true&characterEncoding=utf-8"
            host = "localhost"
            port = "3306"
            validationQuery = "SELECT 1"
            service = "mariadb"
        }

        # The galera profile declares common settings to connect to a Galaera database. Default mode is sequential.
        # Mode sequential = The first available host is used for all queries, reconnect to another host if host is down.
        # available modes: https://mariadb.com/kb/en/library/failover-and-high-availability-with-mariadb-connector-j/
        galera {
            mode = "sequential"
            driver = "org.mariadb.jdbc.Driver"
            url = "jdbc:mariadb:${mode}://${host}:${port}/${database}?autoReconnect=true&characterEncoding=utf-8"
            hostUrl = "jdbc:mariadb:${mode}://${host}:${port}/?autoReconnect=true&characterEncoding=utf-8"
            host = "galera1,galera2,galera3"
            port = "3306"
            validationQuery = "SELECT 1"
            service = "galera"
        }

        # Declares a profile for postgres.
        postgres {
            driver = "org.postgresql.Driver"
            url= "jdbc:postgresql://${host}:${port}/${database}"
            hostUrl = "jdbc:postgresql://${host}:${port}"
            host = "localhost"
            port = "5432"
            validationQuery = "SELECT 1"
            service = "postgres"
        }

        # Declares a profile for Yandex Clickhouse.
        clickhouse {
            driver = "com.clickhouse.jdbc.ClickHouseDriver"
            url = "jdbc:clickhouse://${host}:${port}/${database}?socket_timeout=300000"
            hostUrl = "jdbc:clickhouse://${host}:${port}"
            host = "localhost"
            port = "8123"
            validationQuery = "SELECT 1"
            service = "clickhouse"
        }
    }

    # Defines JDBC database connections used by the system. Use Database.get("name") to obtain a connection
    # defined here.
    database {
        # Basic sample configuration to illustrate all properties
        # sample {
        #    driver = "my.jdbc.driver.Class"
        #    url = "jdbc:mydb://..."
        #    hostUrl = "jdbc:mydb://..."
        #    user = ""
        #    password = ""
        #    initialSize = 0
        #    maxActive = 10
        #    maxIdle = 1
        #    validationQuery = ""
        # }

        # Use the mysql profile (defined above) to connect to a MySQL database
        # sample-mysql {
        #    # apply profile
        #    profile = "mysql"
        #
        #    # specify a user
        #    user = "test"
        #
        #    # and a password
        #    password = "test"
        #
        #    # Specify the name of the database to connect to
        #    database = "testdb"
        #
        #    # Specify the host to connect to or leave empty to connect to "localhost"
        #    host = "somehost"
        # }
    }
}

# Default setup for mixing the "OR*-Mapper" which can work with SQL/JDBC databases,
# MongoDB and Elasticsearch...
mixing {

    # Determines if the database schema (Either SQL/JDBC, Mongo or Elastic) is updated automatically
    # during the startup of this node. Possible values are:
    # - off:  No updates
    # - safe: Only execute safe updates (add tables, columns, collections, indices)
    # - all:  execute all changes (This should be used with extreme caution as all database changes should
    #         be revised manually, especially for the SQL/JDBC world).
    #
    # Note that for cluster environments, this should most probably be turned off and only be enabled on one node.
    autoUpdateSchema = safe

    # Contains the JDBC / SQL specific settings for Mixing.
    jdbc {
        default {
            # Determiens whether the schema is updated automatically for this database/realm.
            updateSchema = true

            # Contains a single SQL statement which is executed during startup before
            # any other statement is issused.
            #
            # This can be used to send a CREATE DATABASE statement in docker / test
            # environments.
            initSql = ""

            # Determines the name of the (local) secondary database. This can be used to
            # increase the efficiency of some reads (OMA.selectFromSecondary).
            secondaryDatabase = ""

            # Determines if using the secondary database is enabled on this node.
            secondaryEnabled = false
        }

        mixing {
            # Contains the name of the database configuration to use
            database = "mixing"

            # Determines the SQL dialect used for DDS statements (Schema Update)
            dialect = "mysql"
        }
    }

    # Permits to adapt / use a legacy schema via mixing.
    # This way different table and column names can be used than the ones actually
    # determined by the property names. Note that this should only be used to migrate
    # legacy databases to mixing as it is a common source of errors and problems.
    #
    # Note that the rename block can be used to let the SchemaTool automatically apply
    # renamings of columns. The same applies to "oldTableName" which will rename the
    # table to the proper name (as specified by the entity or via 'tableName' if presnet).
    legacy {
    #
    #   Entity {
    #       tableName : "alternativeTableName"
    #       oldTableName : "previousTableName"
    #       alias {
    #          propertyName: "alternativeColumnName"
    #       }
    #
    #       rename {
    #           propertyName: "oldColumnName"
    #       }
    #  }
    }
}

# Contains the default configuration used for redis.
redis {

    # Defines pools which can be accessed via the Redis class
    pools {
        default {
            # Contains the name of the host which runs the Redis DB
            host = ""

            # Contains a list of sentinels to connect to in a HA environment.
            sentinels = ""

            # Contians the port to connect to
            port = 6379

            # Contains the connection timeout in ms
            connectTimeout = 2000

            # Contains the read timeout in ms - use 0 to disable
            readTimeout = 10000

            # Contains the password used to connect to redis
            password = ""

            # Contains the database index within redis (0..15).
            # Development system can use db 1 and share their instance with a test-system which will run
            # in db 0 - as an example
            db = 0

            # Limits the number of parallel connections
            maxActive = 32

            # Determines how many unused connections are kept in the pool
            maxIdle = 8
        }

        # Defines the default redis instance being used. The hostname has to be
        # set in the application.conf
        system {

        }
    }
}

# Contains the default config used to connect to MongoDB databases
mongo {
    # Contains all Mongo DB instances known to the system.
    # The default database will be the one used by Mixing and this called "mixing".
    databases {

        # Provides some defaults mainly to supply a guide on how to configure a database.
        default {
            # Contains a list of hosts to connect to (e.g. "localhost:27017"). If you're
            # using the standard port, you can omit the value and just name domains or IP addresses
            hosts = ""

            # Contains the name of the database to connect to.
            db = ""

            # Contains an alternative port to use. When not defined, 27017 will be used by default.
            port = 27017

            # Specifies the username used for authentication. Leave blank if the
            # Mongo instance doesn't require authentication.
            user = ""

            # Specifies the password used for authentication. Leave blank if the
            # Mongo instance doesn't require authentication.
            password = ""

            # Specifies the authentication database of the user. Leave blank if
            # this is equal to the "db" specified above.
            userDatabase = ""
        }
    }

    # Every query which takes longer will be logged to "db-slow" on level INFO
    logQueryThreshold = 10 seconds
}

# Contains the default config used to connect to an Elasticsearch cluster
elasticsearch {
    # Contains a list of cluster nodes (e.g. "localhost:9200,anotherNode:9200").
    hosts = ""

    # Contains a list of index names for which routing has been explicitely suppressed, even though,
    # the code itself would support routing. This can be used when migrating from an unrouted to a
    # routed index or in scenarios where a custom routing isn't always feasible.
    #
    # Note that the index name is the simple class name of the entity, but all lowercase.
    suppressedRoutings = []

    # Contains the index settings per entity.
    settings {
        # Provides a default config for all realms.
        default {
            # Determines the number of shards to use per index.
            numberOfShards = 5

            # Determines the number of replicas (secondary copies) to use per shard.
            numberOfReplicas = 1
        }
    }

    # Every query which takes longer will be logged to "db-slow" on level INFO
    logQueryThreshold = 10 seconds
}
